" vim: set fdm=marker: " Treat comments as folds

" ============================= VIM-PLUG ============================="{{{
call plug#begin('~/.config/nvim/plugged')

" colorscheme & appearance ----------------------
Plug 'chriskempson/base16-vim'              " preview : http://chriskempson.github.io/base16/
Plug 'itchyny/lightline.vim'                " statusline
Plug 'jeffkreeftmeijer/vim-numbertoggle'    " smart relative numbering (default: C-n)
Plug 'jszakmeister/vim-togglecursor'

" utilities ------------------------------------
Plug 'tpope/vim-fugitive'
Plug 'benmills/vimux'                       " interact with tmux to run commands (project-specific settings at <project>.vimrc)

" utilities ------------------------------------
"
call plug#end()
" }}}
" ====================== SOURCE PERSONAL CONFIG ======================"{{{
function! Source(vimfile)
	let src=a:vimfile
	if filereadable(glob(src)) && strlen(src)
		exec ':source' . src
	endif
endfunction

"automatically sources all file in autosource
for fpath in split(globpath('~/.config/nvim/autosource/', '*.vim'), '\n')
	:call Source(fpath)
endfor
"}}}
" =========================== INITIALIZATION ========================="{{{
set nocompatible " no backward-compatible for vi
set encoding=utf-8
set fenc=utf-8
set termencoding=utf-8
" }}}
" ========================= GENERAL SETTINGS ========================={{{
" set a map leader for more key combos
let mapleader = ' '
let g:mapleader = ' '
" save a lot of unneeded shifting
noremap ; :
noremap : ;
" bad habit become useful to quit insert mode
inoremap jk <Esc>


" LINE NUMBER -----------
set number
"set relativenumber     " disable to use vim-numbertoggle for automation
"set numberwidth=3

" SPLIT -----------------> splitview.vim
noremap <silent> <C-h> :call WinMove('h')<cr>
noremap <silent> <C-j> :call WinMove('j')<cr>
noremap <silent> <C-k> :call WinMove('k')<cr>
noremap <silent> <C-l> :call WinMove('l')<cr>
" Column scroll-binding on <leader>sb
noremap <silent> <leader>sb :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>

" TABSTOP ---------------

" WRAP and INDENT -------

" INVISIBLE CHARACTERS --
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪
noremap <leader>l :set list!<cr>

"folding settings
"set foldmethod=indent   "fold based on indent
"set foldnestmax=10      "deepest fold is 10 levels
"set nofoldenable        "dont fold by default
"set foldlevel=1         "this is just what i use
" }}}


" COLORS and THEMES: {{{
set t_Co=256
let base16colorspace=256  " Access colors present in 256 colorspace"

execute "set background=".$BACKGROUND
execute "colorscheme ".$THEME


" }}}



" ============================ MAPPINGS ==============================" {{{

" }}}

" AutoCMDs: {{{
augroup filespecific
  autocmd!
  au BufRead,BufNewFile *.json set ft=javascript
  au FileType go set noet nolist
  au FileType python setl ts=4
  au FileType rust setl sw=0 sts=0
augroup END

augroup cursorline
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END
" }}}


" ==================== FILE TYPE-SPECIFIC SETTINGS ==================="{{{

"}}}

" ========================= OS-SPECIFIC SETTINGS ====================="{{{
" Windows: {{{
if has('win32')
  set gfn=Consolas:h10
  set clipboard=unnamed
" }}}
else
  let s:kernel = system('echo -n "$(uname -s)"')
" Mac: {{{
  if s:kernel == 'Darwin'
    set gfn=Menlo:h12
    " this doesn't work in mountain lion's default vim (does on macvim)
    set clipboard=unnamed    " brew install reattach-to-user-namespace
" }}}
" Linux: {{{
  elseif s:kernel == 'Linux'
"    set guifont=DejaVu\ Sans\ Mono\ 10
    set clipboard=unnamedplus " copy/paste between gui/cli --> require xclip/xsel
  endif
endif
" }}}
" }}}

" ========================== PLUGIN SETTINGS ========================={{{
" toggle cursor {{{
let g:togglecursor_defaul="block"
" }}}
" }}}




" =========================== STATUS LINE ============================{{{

" }}}

" ============================ LIGHTLINE ============================={{{
let g:lightline = {
      \ 'colorscheme': 'Tomorrow_Night',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component': {
      \   'fugitive': '%{exists("*fugitive#head") ? "⎇ ".fugitive#head() : ""}'
      \ },
      \ 'component_function': {
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified',
      \   'filename': 'LightLineFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction
"}}}
