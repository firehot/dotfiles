call plug#begin('~/.config/nvim/plugged')

" colorscheme ----------------------------------
Plug 'chriskempson/base16-vim'              " preview : http://chriskempson.github.io/base16/
" utilities ------------------------------------
Plug 'vim-airline/vim-airline'          " status line for Git
Plug 'scrooloose/nerdtree'          " file browser (remap to <leader>-k)
Plug 'jeffkreeftmeijer/vim-numbertoggle'    " smart relative numbering (default: C-n)
Plug 'ctrlpvim/ctrlp.vim'           " fuzzy search (of course, C-p)
Plug 'benmills/vimux'                           " interact with tmux to run commands
Plug 'tpope/vim-commentary'
" language-specific plugins --------------------


call plug#end()

"if filereadable(glob("~/.vimrc.local")) 
"    source ~/.vimrc.local
"endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible " forget about vi

set clipboard+=unnamedplus " copy/paste between gui/cli --> require xclip/xsel

" set a map leader for more key combos
let mapleader = ' '
let g:mapleader = ' '

" LINE NUMBER -----------
set number
"set relativenumber     " disable to use vim-numbertoggle for automation
"set numberwidth=3

" TABSTOP ---------------

" WRAP and INDENT -------
set wrap "turn on line wrapping
"set wrapmargin=8 " wrap lines when coming within n characters from side
"set linebreak " set soft wrapping
"set showbreak=… " show ellipsis at breaking

"set autoindent " automatically set indent of new line
"set smartindent

" SPLIT -----------------
noremap <silent> <C-h> :call WinMove('h')<cr>
noremap <silent> <C-j> :call WinMove('j')<cr>
noremap <silent> <C-k> :call WinMove('k')<cr>
noremap <silent> <C-l> :call WinMove('l')<cr>
"set splitbelow         "horizontally open new panes to bottom
"set splitright         "vertically open new panes to right

" TAB -------------------

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FILE TYPE SPECIFIC SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf8
let base16colorspace=256  " Access colors present in 256 colorspace"
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors"

execute "set background=".$BACKGROUND
execute "colorscheme ".$THEME


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups, and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set nobackup
"set nowritebackup
"set noswapfile
set backupdir=~/.nvim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.nvim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => StatusLine
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" quickly tap jj to quit insert mode
inoremap jj <Esc>
" save a lot of unneeded shifting
noremap ; :
noremap : ;
" Quickly edit/reload the vimrc file (manually/automatically)
nnoremap <silent> <leader>ev :tabnew<CR>:e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>
autocmd BufLeave $MYVIMRC :source $MYVIMRC

" Force myself to learn hjkl
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_section=''
let g:airline_detect_paste=1 " Show PASTE if in paste mode
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
"}}} ------------------------------------------------------

" NERDTree {{{
let g:NERDTreeQuitOnOpen=1          " close NERDTree after a file is opened
let NERDTreeShowHidden=1            " show hidden files in NERDTree
let NERDTreeIgnore = ['\.js.map$']  " remove some files by extension
noremap <silent> <leader>k :NERDTreeToggle<cr> 
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>
"}}} ------------------------------------------------------

" CtrlP {{{
let g:ctrlp_dotfiles = 1                " enable search for dotfiles
"}}} ------------------------------------------------------

"}}} ------------------------------------------------------


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Abbreviations --> autocorrect
abbr funciton function
abbr teh the
abbr tempalte template
abbr fitler filter
