#!/bin/sh
# PURPOSE : conveniently create sample tmux script
# status: finished on 2016-02-05 .
# USAGE : 1. tm --> open tmux session list 
#         2. tm <path/to/file> or tm <path/to/file.tmux> 
#            --> check for <file> session to attach. if <file session> does not exist, create sample file.tmux and load it
# this script designed run independently.

### COLOR DEFENITION ### reference: https://en.wikipedia.org/wiki/ANSI_escape_code
# Note: \033 = \e   30+i to specify foreground color, 40+i to specify background color,
reset='\e[0m'     ;   

bold='\e[1m'      ;   faint='\e[2m'       ;   italic='\e[3m'       ;   underline='\e[4m'    ;
blink='\e[5m'     ;   blinkfast='\e[6m'   ;   negative='\e[7m'     ;   conceal='\e[8m'      ;
strike='\e[9m'    ;

black='\e[30m'    ;   red='\e[31m'        ;   green='\e[32m'       ;   yellow='\e[33m'      ;
blue='\e[34m'     ;   magenta='\e[35m'    ;   cyan='\e[36m'        ;   white='\e[37m'       ;
xterm='\e[38'     ;   default='\e[39m'    ;

### A SAMPLE OF PRE-CONFIGURED TMUX ENVIRONMENT ###

function create_tmuxconf() {
	PROJECT_NAME=$(basename "${1%.tmux}")
	PROJECT_LOCATION="$(dirname "$1")"
	# make sure that $PROJECT_LOCATION exists
	mkdir -p "$PROJECT_LOCATION"
	# retrieve absolute path of $PROJECT_LOCATION
  PROJECT_LOCATION="$( cd -P "$PROJECT_LOCATION" && pwd )"

	cat << EOF > "$1"
#!/bin/sh
PROJECT_NAME=$PROJECT_NAME # /!\ must be UNIQUE
PROJECT_LOCATION="$PROJECT_LOCATION"

tmux -2 new-session -d -s $PROJECT_NAME

# Setup a window for developing
tmux new-window -t \$PROJECT_NAME:1 -n "vim"
tmux send-keys "$([[ -n $EDITOR ]] && echo $EDITOR || echo "cat" ) "\$PROJECT_LOCATION"/\$PROJECT_NAME.tmux" C-m
tmux split-window -v -p 10
tmux send-keys "net" C-m
tmux split-window -h -p 50

# Setup a window for ...
tmux new-window -t \$PROJECT_NAME:2 -n 'pasta'
tmux split-window -h
tmux select-pane -t 1
tmux send-keys "ls" C-m
tmux split-window -v
tmux resize-pane -D 20

# Set default window
tmux select-window -t \$PROJECT_NAME:1
tmux select-pane -t 1

# Attach to session
tmux -2 attach-session -t \$PROJECT_NAME
EOF
}

# abort if we're already inside a TMUX session
[ "$TMUX" == "" ] || exit 1

if [ ! $# == 0 ]; then
	# evaluate parameters -------------------------------------------------
	[[ ! $# == 1 ]] && echo -e "${red}Too many parameters${reset}. Only ${cyan}\`$1\`${reset} is used."
	tmux_conf=$1
	tmux_name=$(basename "${1%.tmux}")

	# remove all occurances of space and period
  if [[ ! "$tmux_name" = "${tmux_name%[[:space:]]*}" || "$tmux_name" == *.* ]]; then
		echo -e "${red}Bad session name${reset}. It must have no spaces, no periods, ..."
    tmux_name="$(echo -e "$tmux_name" | tr -d '[[:space:]]' | tr -d '.' )"
  	read -p "Use \`$tmux_name\` instead [y/n] ?" -n 1 -r && echo
  	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 1
  	tmux_conf="$(dirname "$1")/$tmux_name.tmux"
	fi

	# always use *.tmux for tm script.
	tmux_conf="${tmux_conf%.tmux}".tmux

	# startup a "default" session if non currently exists -----------------
	echo -e "Checking for ${cyan}\`$tmux_name\`${reset} ..."
	tmux has-session -t $tmux_name 2>/dev/null
	if [ "$?" -eq 1 ] ; then
	    echo -e "--> Session named ${cyan}\`$tmux_name\`${reset} ${yellow}not found${reset}."
	    if ! [[ -f "$tmux_conf" ]]; then
	    	echo -e "--> The file ${cyan}\`$tmux_conf\`${reset} ${yellow}does not exists${reset}. "
	    	read -p "Create $(basename $tmux_conf) in \`$(dirname $tmux_conf)\` [y/n] ?" -n 1 -r && echo
	    	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
	    	create_tmuxconf "$tmux_conf"
	    fi
	    if ! [[ -f "$tmux_conf" ]]; then
		  	echo -e "${red}Errors${reset} happen when creating ${cyan}$tmux_conf${reset}"
		  fi

	    echo -e "Loading configuration file ${cyan}\`$tmux_conf\`${reset}"
    	# fix parameter for source command in working directories <-- source "./<file>.tmux" works. source <file>.tmux won't
		  [[ $tmux_conf = $tmux_name.tmux ]] && tmux_conf=./$tmux_conf
	    source "$tmux_conf"
	else
	    echo "Session found. Connecting ${cyan}$tmux_name${reset} ..."
			tmux attach-session -t $tmux_name
	fi
else
	# present menu for user to choose which workspace to open -------------
	PS3="Choose session/command: "
	options=($(tmux list-sessions -F "#S" 2>/dev/null) "New Session" "zsh" "kill all sessions")
	echo "Available sessions"
	echo "------------------"
	echo " "
	select opt in "${options[@]}"
	do
		case $opt in
			"New Session")
				read -p "Enter new session name: " SESSION_NAME
				tmux new -s "$SESSION_NAME"
				break
				;;
			"zsh")
				zsh --login
				break;;
			"kill all sessions")
				for sess in $(tmux ls | awk '{FS=":" ; print $1}' | sed 's/://g') ; do tmux kill-session -t $sess ; done
				break;;
			*)
				tmux attach-session -t $opt
				break
				;;
		esac
	done
fi
