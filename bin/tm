#!/bin/sh
# PURPOSE : conveniently create sample tmux script
# status: finished on 2016-02-05 .
# USAGE : 1. tm --> open tmux session list 
#         2. tm <path/to/file> or tm <path/to/file.tmux> 
#            --> check for <file> session to attach. if <file session> does not exist, create sample file.tmux and load it

### A SAMPLE OF PRE-CONFIGURED TMUX ENVIRONMENT ###

function create_tmuxconf() {
	PROJECT_NAME=$(basename "${1%.tmux}")
	PROJECT_LOCATION="$(dirname "$1")"
	# make sure that $PROJECT_LOCATION exists
	mkdir -p "$PROJECT_LOCATION"
	# retrieve absolute path of $PROJECT_LOCATION
  PROJECT_LOCATION="$( cd -P "$PROJECT_LOCATION" && pwd )"

	cat << EOF > "$1"
#!/bin/sh
PROJECT_NAME=$PROJECT_NAME # /!\ must be UNIQUE
PROJECT_LOCATION="$PROJECT_LOCATION"

tmux -2 new-session -d -s $PROJECT_NAME

# Setup a window for developing
tmux new-window -t \$PROJECT_NAME:1 -n "vim"
tmux send-keys "$([[ -n $EDITOR ]] && echo $EDITOR || echo "cat" ) "\$PROJECT_LOCATION"/\$PROJECT_NAME.tmux" C-m
tmux split-window -v -p 10
tmux send-keys "net" C-m
tmux split-window -h -p 50

# Setup a window for ...
tmux new-window -t \$PROJECT_NAME:2 -n 'pasta'
tmux split-window -h
tmux select-pane -t 1
tmux send-keys "ls" C-m
tmux split-window -v
tmux resize-pane -D 20

# Set default window
tmux select-window -t \$PROJECT_NAME:1
tmux select-pane -t 1

# Attach to session
tmux -2 attach-session -t \$PROJECT_NAME
EOF
}

# abort if we're already inside a TMUX session
[ "$TMUX" == "" ] || exit 1

if [ ! $# == 0 ]; then
	# evaluate parameters -------------------------------------------------
	[[ ! $# == 1 ]] && echo "Too many parameters. Only \`$1\` is used."
	tmux_conf=$1
	tmux_name=$(basename "${1%.tmux}")

	# remove all occurances of space and period
  if [[ ! "$tmux_name" = "${tmux_name%[[:space:]]*}" || "$tmux_name" == *.* ]]; then
		echo "Bad session name. It must have no spaces, no periods, ..."
    tmux_name="$(echo -e "$tmux_name" | tr -d '[[:space:]]' | tr -d '.' )"
  	read -p "Use \`$tmux_name\` instead [y/n] ?" -n 1 -r && echo
  	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 1
  	tmux_conf="$(dirname "$1")/$tmux_name.tmux"
	fi

	# always use *.tmux for tm script.
	tmux_conf="${tmux_conf%.tmux}".tmux

	# startup a "default" session if non currently exists -----------------
	echo "Checking for \`$tmux_name\` ..."
	tmux has-session -t $tmux_name 2>/dev/null
	if [ "$?" -eq 1 ] ; then
	    echo "--> No Session found."
	    if ! [[ -f "$tmux_conf" ]]; then
	    	echo "--> The file \`$tmux_conf\` does not exists. "
	    	read -p "Create $(basename $tmux_conf) in $(dirname $tmux_conf) [y/n] ?" -n 1 -r && echo
	    	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
	    	create_tmuxconf "$tmux_conf"
	    fi
	    if ! [[ -f "$tmux_conf" ]]; then
		  	echo "Errors happen when creating $tmux_conf"
		  fi

	    echo "Loading configuration file \`$tmux_conf\`"
	    source "$tmux_conf"
	else
	    echo "Session found. Connecting $tmux_name ..."
			tmux attach-session -t $tmux_name
	fi
else
	# present menu for user to choose which workspace to open -------------
	PS3="Choose session/command: "
	options=($(tmux list-sessions -F "#S" 2>/dev/null) "New Session" "zsh" "kill all sessions")
	echo "Available sessions"
	echo "------------------"
	echo " "
	select opt in "${options[@]}"
	do
		case $opt in
			"New Session")
				read -p "Enter new session name: " SESSION_NAME
				tmux new -s "$SESSION_NAME"
				break
				;;
			"zsh")
				zsh --login
				break;;
			"kill all sessions")
				for sess in $(tmux ls | awk '{FS=":" ; print $1}' | sed 's/://g') ; do tmux kill-session -t $sess ; done
				break;;
			*)
				tmux attach-session -t $opt
				break
				;;
		esac
	done
fi
