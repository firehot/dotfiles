#!/bin/sh

### A SAMPLE OF PRE-CONFIGURED TMUX ENVIRONMENT ###

function create_tmuxconf() {
	PROJECT_NAME=$(basename "${1%.*}")
	cat << EOF > "$1.tmux"
#!/bin/sh
PROJECT_NAME=$PROJECT_NAME # /!\ must be UNIQUE

tmux -2 new-session -d -s $PROJECT_NAME

# Setup a window for developing
tmux new-window -t $PROJECT_NAME:1 -n "vim"
tmux send-keys "ls" C-m
tmux split-window -v -p 10
tmux send-keys "net" C-m
tmux split-window -h -p 50

# Setup a window for ...
tmux new-window -t $PROJECT_NAME:2 -n 'pasta'
tmux split-window -h
tmux select-pane -t 1
tmux split-window -v
tmux resize-pane -D 20

# Set default window
tmux select-window -t $PROJECT_NAME:1
tmux select-pane -t 1

# Attach to session
tmux -2 attach-session -t $PROJECT_NAME
EOF
}

# abort if we're already inside a TMUX session
[ "$TMUX" == "" ] || exit 1

if [ ! $# == 0 ]; then
	# evaluate parameters -------------------------------------------------
	[[ ! $# == 1 ]] && echo "Too many parameters. Only \`$1\` is used."
	if [[ "$1" = "${1%[[:space:]]*}" ]]; then
		echo "Checking for \`$1\` ..."
		tmux_conf=$1
	else
		echo "Session name must not contain spaces."
		tmux_conf="$(echo -e "$1" | tr -d '[[:space:]]')"
  	read -p "Use \`$tmux_conf\` instead [y/n] ?" -n 1 -r && echo
  	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 1
	fi
	# startup a "default" session if non currently exists -----------------
	tmux has-session -t $tmux_conf 2>/dev/null
	if [ "$?" -eq 1 ] ; then
	    echo "--> No Session found."
	    if ! [[ -f $tmux_conf || -f $tmux_conf.tmux ]]; then
	    	echo "--> The file \`$tmux_conf\` not exists. "
	    	read -p "Create one in the current working directory [y/n] ?" -n 1 -r && echo
	    	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
	    	create_tmuxconf "$tmux_conf"
	    	tmux_conf="$tmux_conf.tmux"
	    fi
	    [ -f $tmux_conf.tmux ] && tmux_conf="$tmux_conf.tmux"
	    echo "Loading configuration file \`$PWD/$tmux_conf\`"
	    # Use pushd and popd for faster CLI navigation
	    # pushd $PROJECT_DIR
	    source "$PWD/$tmux_conf"
	    # popd
	else
	    echo "Session found. Connecting $tmux_conf ..."
			tmux attach-session -t $tmux_conf
	fi
else
	# present menu for user to choose which workspace to open -------------
	PS3="Choose session/command: "
	options=($(tmux list-sessions -F "#S" 2>/dev/null) "New Session" "zsh" "kill all sessions")
	echo "Available sessions"
	echo "------------------"
	echo " "
	select opt in "${options[@]}"
	do
		case $opt in
			"New Session")
				read -p "Enter new session name: " SESSION_NAME
				tmux new -s "$SESSION_NAME"
				break
				;;
			"zsh")
				zsh --login
				break;;
			"kill all sessions")
				for sess in $(tmux ls | awk '{FS=":" ; print $1}' | sed 's/://g') ; do tmux kill-session -t $sess ; done
				break;;
			*)
				tmux attach-session -t $opt
				break
				;;
		esac
	done
fi
