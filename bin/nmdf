#!/bin/sh
###############################################################################
# script  : $DOTREPO/bin/nmdf   maintained by titepweb at gmail.com           #
# status  : unfinished. Last edit on 2016-02-05                               #
# feature : 1. launch $DOTREPO/link with parameters                           #
#           2. Manage dotfiles project: show status, easily git pull/push     #
###############################################################################

AUTHOR=titepweb
REPO_URI=https://github.com/titepweb/dotfiles
REPO_BRANCH=master
APP_URL=https://raw.githubusercontent.com/titepweb/dotfiles/master/bin/nmdf

#### LIBRARIES ALLOWING nmdf TO RUN FROM A REMOTE LOCATION ####################
DEFAULT_DOTREPO="$HOME/PROJECT/dotfiles"

function updateRepo {
  local REPO_LOCAL="$1"
  local action="$2"
  # Check if git is installed before doing git operations
  type git >/dev/null 2>&1 || { 
    echo "************************************"
    echo >&2 "Git is required to clone/pull/push dot files from/to a remote repository. "\
    "Symlinks can still be auto created to files in $REPO_LOCAL but a remote repository will not be used.";
    echo "************************************"
    return;
  }

  # if @1="pull" but there is no repo here create one, otherwise update it afterwards.
  if [ "$action" == "pull" -a ! -d "$REPO_LOCAL/.git" ]; then
    displayTitle "DOWNLOADING MASTER REPOSITORY"
    [ -e "$REPO_LOCAL" ] && FAIL "${red}${bold}$REPO_LOCAL is a regular file or a not empty directory.\n'git clone' only work on empty directory.${reset}.\nPlease rename/remove it"
    git clone -b "$REPO_BRANCH" "$REPO_URI" "$REPO_LOCAL"
    OK "${green}${bold}Cloning the MASTER REPOSITORY completed!${reset}"
    return
  fi

  # If REPO_LOCAL does not exist, return.
  [ ! -d "$REPO_LOCAL" ] && FAIL "${red}${bold}The REPO_LOCAL $REPO_LOCAL does not exist. \nUpdating Repository fails!${reset}"

  # Git Pull or Push
  if [ "$action" == "pull" ]; then
    displayTitle "PULLING CHANGES FROM THE MASTER REPOSITORY"
    (cd $REPO_LOCAL && git pull origin "$REPO_BRANCH")
    OK "${green}${bold}\nPulling changes from the MASTER REPOSITORY completed!${reset}"
  elif [ "$action" == "push" ]; then
    displayTitle "PUSHING CHANGES TO MASTER REPOSITORY"
    cd $REPO_LOCAL && git add . && git commit -m "$commitMessage" && git push origin "$REPO_BRANCH"
    echo -e "${green}${bold}\nPushing changes from the MASTER REPOSITORY completed!${reset}"
  fi
}

function remoterunning {
  #NOTE: [01;04;33  = bold + underline + xterm
  BoldUnderlinedRed='\n\e[01;04;38m%s\e[0m\n'

  echo "nmdf is running from remote location."
  printf $BoldUnderlinedRed "CLONING A WORKING DOTFILES LOCAL REPOSITORY..."
  updateRepo "$DEFAULT_DOTREPO" pull
  sh -c "$DEFAULT_DOTREPO/bootstrap.sh true"
  exit 0
}

function sourceif () {
  local src="$1"
  if [ -f "$src" ]; then
    source "$@"
  else
    remoterunning
  fi
}

#### SOURCE or CLONE a git-working DOTREPO (a local dotfile directory) ########

# Identify ABSOLUTE path of directory storing the script. Scripts sourced by this script will inherit DOTREPO variable.
if [ -L $DOTREPO ] || [ -z $DOTREPO ]; then
  DOTREPO="$( cd -P "$( dirname "$0" )" && pwd )"
  DOTREPO="$(dirname $DOTREPO)"   # which means, this script must be in $DOTREPO/topic/
fi
sourceif $DOTREPO/install/inform
sourceif $DOTREPO/install/cross-platform
sourceif $DOTREPO/install/installpkg true
sourceif $DOTREPO/install/link true
  # provide $dotDir, which is used in updateRepo and stats functions
  # clean default variables of link
  symlinkORcopy=
  recopy=
  askbeforeaction=
  overwrite_all=
  backup_all=

#=[ HELP FUNCTION AS WELL AS A MANUAL ]=======================================#

function nmdf_help {
cat << EOF
      REPO_URI=$REPO_URI    REPO_BRANCH=$REPO_BRANCH
┌─────────────────────────────────────────────────────────────────────────────┐
│ nmdf enables us to perform it frequently and easily maintain dotfiles.      │
│ (1) $ > git clone >REPO_URI<                                                │
│ (2) bootstrap = INSTALL_PACKAGES + INSTALL_DOTFILES (default parameters)    │
│  │  $ > ./>DOTREPO</bootstrap.sh true                                       │
│ (3) edit dotfiles, add or remove some dotfiles ...                          │
│ (4) Show statistic data about dotfiles                                      │
│  │  $ > nmdf -s                                                             │
│ (5) push changes to the remote repository                                   │
│  │  $ > nmdf -p "<commit message>"                                          │
│  │               If the commitMessage is not specified or too short,        │
│  │               an auto-message will be generated.                         │
│ (x) pull changes from the >REPO_URI<                                        │
│  │  $ > nmdf -u                                                             │
│ (x) INSTALL_PACKAGES + INSTALL_DOTFILES                                     │
│  │  $ > nmdf -I [options]                                                   │
│ (x) INSTALL_DOTFILES only                                                   │
│  │  $ > nmdf command [options]                                              │  
│  │           -i  : Copy dotfiles base on their extensions.                  │
│  │           -l  : Symlink both *.copy and *.symlink files                  │
│  │           -c  : Copy both *.copy and *.symlink files                     │
│  │                                                                          │ 
│  │                   -o  : Create symlinks without overwrite confirmation.  │ 
│  │                   -b  : Create symlinks without backup confirmation.     │
│  │                   -a  : Ask user for copying file or creating symlink.   │
│  │                                                                          │
│  │  nmdf skip copying the *.copy if the destination files exist by default  │
│  │  because they could have been configured and therefore different to the  │
│  │  corresponding dotfiles. To skip protecting to overwrite those, use -f.  │
│  │                                                                          │
│  │                   -f  : force to install *.copy dotfiles event if the    │
│  │                         corresponding destination files exist            │
│  │  Parameters can be combined as following :                               │
│  │  $ > nmdf -uIab                                                          │
│ \\│/                                                                         │
└─────────────────────────────────────────────────────────────────────────────┘
EOF
}

#### LIBRARIES USED TO MAINTAIN DOTFILES ######################################

function stats {
  local REPO_LOCAL="$1"
  local dotDir="$2"

  cd "$REPO_LOCAL"  # cd to dotdir before du -sh and git add .
  displayTitle "STATISTIC DATA"

  echo -e "-dotfiles in     :${blue}${bold} $REPO_LOCAL${reset}"
  if [ -e "$dotDir" ]; then
    local insState="$(readsymlink "$dotDir")"
    if [ "$insState" == "$REPO_LOCAL" ]; then
      echo -e "-installed in    :${blue}${bold} $dotDir${reset}"
    fi
  fi
  if [ ! -e "$dotDir" ] || [ -z "$insState" ]; then
    echo -e "-REPO_LOCAL symlink  :${red}${bold} not installed${reset}"
  fi
  echo -e "-total files     :${yellow}${bold} $(find $REPO_LOCAL -type f | wc -l)${reset} \t files"
  echo -e "-total directory :${yellow}${bold} $(find $REPO_LOCAL -type d | wc -l)${reset} \t directories"
  echo -e "-usage           :${red}${bold} $(du -sh)${reset}"
  echo -e "-dotfiles        :${cyan}${bold} $(find $REPO_LOCAL -type f \
    -not -path "*/.git/*" \
    -not -path "*/.hg/*" \
    -not -path "$tempDir/*" \
    -not -path "$backupDir/*" \
    | wc -l)${reset} \t files"
  echo -e "-dotdirectories  :${cyan}${bold} $(find $REPO_LOCAL -type d \
    -not -path "*/.git/*" \
    -not -path "*/.hg/*" \
    -not -path "$tempDir/*" \
    -not -path "$backupDir/*" \
    | wc -l)${reset} \t directories"
  echo "-----------------------------------------"
  git add . && git status
}

#=[ MAIN ]====================================================================#

# Parse option arguments or ask for them if not been specified 
# ----------------------------------------------------------------------
  if [ $# = 0 ]; then
    nmdf_help
    FAIL "Parameters is needed to execute nmdf."
  fi

  [ "$1" ==  "--help" ] && nmdf_help
  OPTIND=1 # Reset in case getopts has been used previously in the shell.
  #NOTE: Never use getopt (Traditional versions of getopt cannot handle empty argument strings, or arguments with embedded whitespace.)
  while getopts :uclIifaobsd:r:p: OPTION; do
    case $OPTION in
      u)  pullOption=true ;;
      I)  installpkg=true ;
      # parameters for $DOTREPO/install/link {{{
          symlinkORcopy="symlink+copy" ;;
      c)  symlinkORcopy="copy" ;;
      l)  symlinkORcopy="symlink" ;;
      i)  symlinkORcopy="symlink+copy" ;;
      f)  recopy=true ;;
      a)  askbeforeaction=true ;;
      o)  overwrite_all=true ;;
      b)  backup_all=true ;;
      # }}}
      s)  showStats=true ;;
      d)  dotDir=$OPTARG 
          # Trim the trailing slash from the dot directory if user mistyped.
          [[ $dotDir == */ ]] && dotDir="${dotDir%?}"  # OR dotDir=${dotDir:1}
      ;;
      r)  REPO_URI=$OPTARG ;;
      p)  pushOption=true ;
          commitMessage=$OPTARG
          [[ -z "$commitMessage" ]] || [[ ${#commitMessage} -lt 4 ]] && commitMessage="Auto commit dot files at $(date)"
      ;;
      :)  #@FIXME: This option is not considered if p,d,r option is follow by another argument; for example, nmdf -dr , nmdf -pa. So, nmdf -ap is desired instead of nmdf -pa
          if [ "$OPTARG" == "p" -a -z "${commitMessage// }" ]; then
            commitMessage="Auto commit dot files at $(date)"
            echo "Automatic commit message :"$commitMessage
          else
            echo "Option -$OPTARG requires an argument. Type nmdf -h for usage."
            exit 1
          fi
      ;;
      h|\?) # if unrecognized option - show help
          nmdf_help
          exit 0
      ;;
    esac
  done
  shift $((OPTIND-1))  #This tells getopts to move on to the next argument.
#------------------------------------------------------------------------------
  [ "$pullOption" == "true" ] && updateRepo "$dotDir" "pull" 

  # @FIXME:
  # sh -c "`curl -fsSL https://raw.githubusercontent.com/$AUTHOR/nmdf/master/bin/nmdf`"
  # sh -c "$(wget https://raw.githubusercontent.com/$AUTHOR/nmdf/master/bin/nmdf -O -)"
  # bash <(wget -nv -O -https://raw.githubusercontent.com/$AUTHOR/nmdf/master/bin/nmdf)
  # if this script is running from a remote location and the dotfiles directory was empty, download and save nmdf to the bin directory, however, 
  if [ ! -f "$binDir/nmdf" ] && [ ! hash nmdf >/dev/null 2>&1 ]; then
    curl -fsSL -o "$binDir/nmdf" $APP_URL
    chmod +x "$binDir/nmdf"
  fi

  # After pulling, dotDir must be created or filled with content. So, Quit if dotDir does not exist.
  [ ! -d "$dotDir" ] && FAIL "Dotfile directory ${red}'$dotDir'${reset} does not exist. nmdf is terminated."
#---------------------------------------------------------------------------------------------------------
  [ "$installpkg" == "true" ] && INSTALL_PACKAGES
  [ -n "$symlinkORcopy" ] && INSTALL_DOTFILES

    # for the first time, submodule need to be 
    # displayTitle "INITIALIZING SUBMODULES"
    # cd "$dotDir" && git submodule update --init --recursive #--recrusive means update all submodules within

  [ "$showStats" == "true" ] && stats "$DOTREPO" "$dotDir"
  [ "$pushOption" == "true" ] && updateRepo "$dotDir" "push" 
#---------------------------------------------------------------------------------------------------------
echo -e "\n$message"

exit 0






#### FUNCTION BANK ###########################################################

# 1 ContextualSymlinkList

# 2

  for file in $(find "$topic" -type f -name .install.sh \
                -not -path "*/*\.ingore/*" \
                -not -path "*/*\.80%/*" \
              ); do
    INFO "Source ${cyan}$file${reset}"
    source "$file"
  done

# 3 # RemoveTailing function can be rewritten :

  for i in `seq 1 10`; #10 here is customizable
    do
      find "$1" -mindepth $i -maxdepth $i -name '*.symlink' -exec sh -c ' {
        if [[ $0 =~ .*\.symlink/.*\.symlink$ ]]; then
          mv "$0" "${0%.symlink}"
          count_rename=$(($count_rename+1))
          echo -e "  [\e[31mrename\e[0m] ${0%.symlink}\e[9;31m.symlink\e[0m"
        fi
      }' {} \;
    done

# 4 # check ff a directory has a *.symlink file inside...
  local results=( $(find "$src" -name "*.symlink") )
  if (( ${#results[@]} )) ; then
    if [[ -d "$dst" ]]; then
      SCAN "Existed $dst" 
    else
      mkdir -p "$dst"
      OK "Created $dst"
    fi
  else
    SCAN "Not found any *.symlink files in $src"
  fi

# 5 # 
# Recursively look for the target which $dotDir points to: 
# a modified version from : http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in/246128#246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readsymlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
  dotDir="$( cd -P "$( dirname "$SOURCE" )/.." && pwd )"  #--> nmdf must be in $binDir, not in $dotDir
if [ -z "$dotDir" ]; then
fi

