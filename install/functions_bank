#!/bin/bash
# status: unfinished. Last edit on 2016-02-04
echo ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

function about {
cat << EOF
┌─────────────────────────────────────────────────────────────────────────────┐
                      The CORE CHARACTERISTICS of nmdf

  1. flexibility : cross-platform (not tested yet)

  2. modularity : topic-central organization

  3. centralization

  4. support copy and symlink option. Why? First and foremost, certain dotfiles
     could contains sensitive information, as in muttrc (email password), ssh
     keys, ... , so it need to copied and manually configured; a prompt is nice.
     Secondly, some softwares, like newsbeuter, does not accept configuration 
     symlink files. Thirdly, we need one-way changes from our dotDir to local 
     configuration files for some programs; therefore, we will not be out of 
     controlled. Futhermore, we could nmdf -l to use linking instead of copying 
     and nmdf -c à la the well-known Stow tool.

  5. smart storing : Unlike the alternative scripts which store .dotfiles and 
     their ~/.data in dorDir with .symlink, nmdf only stores what really matter.
     When installing, nmdf deeply scan for *.symlink and *.copy files and
     directories in every topic. Therefore, nmdf keep dotDir lightweight due to
     linking and copying only essential files instead of the whole directories
     which may contain overweight temp files, for instance, ~/.config/chromium.

     For example, do not use ~/.config/sublime-text-3.symlink. We just need to 
     symlink 2 files, then install PackageControl, and let it take over the rest.
     + ~/.config/sublime-text-3/Packages/User/Package Control.sublime-settings  
     + ~/.config/sublime-text-3/Packages/User/Package Control.sublime-settings

     Another example: For vim, we just need to symlink ~/.vimrc, install vundle,
     run :PlugInstall in vim or 'vim +PluginInstall +qall' from command line to
     install/update vim plugins.

     NOTE: 'git submodule' is briliant to manage pluggins of other programs!

  6. including pull for updates from and push changes to the REPO_URI. 

  7. automatically decide git clone/pull based on whether nmdf is run remotely.

 -----------------------------------------------------------------------------
        The ORAGNIZATION MODEL of DOTFILES UNDER the MANAGEMENT of nmdf 

 dotfiles                 # topic-centric organization dotfiles
 ├─ bin  (required)       # added to your \$PATH and be made available everywhere
 │  ├─ nmdf               # nmdf should be here for easily often running.  
 │  ├─ xxx                # xxx is used to test new learned bash codes.
 │  ├─ tm                 # tm script for tmux script
 │  └─ ...                # 
 ├─ temp (optional)       # --> add this folder into .gitignore
 ├─ nmdf.log              # --> add this folder into .gitignore
 ├─ sample topic          # nmdf #1: scan for topics, except *.ignore ones  
 │  ├─ .install.sh        # nmdf #1: performs additional installation
 │  ├─ .exclude-platforms # nmdf #2: specifies excluded platforms for this topic
 │  ├─ *[.symlink].ignore # nmdf #3: ignore these files/directories
 │  ├─ *[.copy].80%       # nmdf #3: ignore these files/directories (dev files)
 │  ├─ any_name.symlink   # nmdf #3: symlinked to ~/.any_name
 │  ├─ any_name.copy      # nmdf #3: copied to ~/.any_name
 │  ├─ ...                # --> use nice=# for zplug to load scripts orderly
 │  ├─ zprofile.zsh       # zsh #1: run for login shells
 │  ├─ path.zsh           # zsh #2: modifies \$PATH
 │  ├─ the_others.zsh     # zsh #3: topic-specific aliases
 │  ├─ postinit.zsh       # zsh #4: run after additional setup
 │  ├─ completion.zsh     # zsh #5: zsh completion setup
 │  ├─ ...
 │  ├─ nmExplample.md     # a decent place to type your discovering process... 
 │  └─ other files
 └─ git
    ├─ bin                # contains git scripts
    │  └─ git-specific-script
    ├─ gitconfig.symlink  # symlinked to ~/.gitconfig
    ├─ aliases.zsh        # sets up git aliases
    ├─ path.zsh           # adds dotfiles/git/bin to \$PATH
    └─ ...

└─────────────────────────────────────────────────────────────────────────────┘
EOF
}




#### FUNCTION BANK ###########################################################

# 1 ContextualSymlinkList for find command

# 3 # RemoveTailing function can be rewritten :

  for i in `seq 1 10`; #10 here is customizable
    do
      find "$1" -mindepth $i -maxdepth $i -name '*.symlink' -exec sh -c ' {
        if [[ $0 =~ .*\.symlink/.*\.symlink$ ]]; then
          mv "$0" "${0%.symlink}"
          count_rename=$(($count_rename+1))
          echo -e "  [\e[31mrename\e[0m] ${0%.symlink}\e[9;31m.symlink\e[0m"
        fi
      }' {} \;
    done

# 4 # check ff a directory has a *.symlink file inside...
  local results=( $(find "$src" -name "*.symlink") )
  if (( ${#results[@]} )) ; then
    if [[ -d "$dst" ]]; then
      SCAN "Existed $dst" 
    else
      mkdir -p "$dst"
      OK "Created $dst"
    fi
  else
    SCAN "Not found any *.symlink files in $src"
  fi

# 5 # 
# Recursively look for the target which $dotDir points to: 
# a modified version from : http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in/246128#246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readsymlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
  dotDir="$( cd -P "$( dirname "$SOURCE" )/.." && pwd )"  #--> nmdf must be in $binDir, not in $dotDir
if [ -z "$dotDir" ]; then
fi
